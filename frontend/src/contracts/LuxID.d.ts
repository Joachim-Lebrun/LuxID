/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LuxIDInterface extends ethers.utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "linkedIdentity(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requiredClaims(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedIssuerClaims(address,uint256)": FunctionFragment;
    "registerIdentity(address,address)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "requireClaims(uint256,uint256[])": FunctionFragment;
    "check(uint256,address)": FunctionFragment;
    "checkWithClaims(uint256[],address)": FunctionFragment;
    "addTrustedIssuer(address,uint256[])": FunctionFragment;
    "removeTrustedIssuer(address)": FunctionFragment;
    "updateTrustedIssuer(address,uint256[])": FunctionFragment;
    "isTrustedIssuer(address)": FunctionFragment;
    "hasClaimTopic(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "linkedIdentity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredClaims",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedIssuerClaims",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireClaims",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWithClaims",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedIssuer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrustedIssuer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimTopic",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkedIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedIssuerClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkWithClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimTopic",
    data: BytesLike
  ): Result;

  events: {
    "ClaimRequirementAdded(uint256,uint256[])": EventFragment;
    "IdentityRegistered(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TrustedIssuerAdded(address,uint256[])": EventFragment;
    "TrustedIssuerRemoved(address)": EventFragment;
    "TrustedIssuerUpdated(address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimRequirementAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuerUpdated"): EventFragment;
}

export type ClaimRequirementAddedEvent = TypedEvent<
  [BigNumber, BigNumber[]] & { checkType: BigNumber; claimTopics: BigNumber[] }
>;

export type IdentityRegisteredEvent = TypedEvent<
  [string, string] & { wallet: string; identity: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TrustedIssuerAddedEvent = TypedEvent<
  [string, BigNumber[]] & { issuer: string; claimTopics: BigNumber[] }
>;

export type TrustedIssuerRemovedEvent = TypedEvent<
  [string] & { issuer: string }
>;

export type TrustedIssuerUpdatedEvent = TypedEvent<
  [string, BigNumber[]] & { issuer: string; claimTopics: BigNumber[] }
>;

export class LuxID extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LuxIDInterface;

  functions: {
    factory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * correspondence between wallet and identity
     */
    linkedIdentity(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredClaims(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedIssuerClaims(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * function used by the factory to register a newly created identity with the wallet of the creator
     */
    registerIdentity(
      _wallet: string,
      _identity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * function checking if a wallet is corresponding to an identity or not
     */
    isRegistered(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requireClaims(
      _checkType: BigNumberish,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    check(
      _checkType: BigNumberish,
      _identity: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkWithClaims(
      _claims: BigNumberish[],
      _identity: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTrustedIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasClaimTopic(
      _issuer: string,
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  factory(overrides?: CallOverrides): Promise<string>;

  /**
   * correspondence between wallet and identity
   */
  linkedIdentity(arg0: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredClaims(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedIssuerClaims(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * function used by the factory to register a newly created identity with the wallet of the creator
   */
  registerIdentity(
    _wallet: string,
    _identity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * function checking if a wallet is corresponding to an identity or not
   */
  isRegistered(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

  requireClaims(
    _checkType: BigNumberish,
    _claimTopics: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  check(
    _checkType: BigNumberish,
    _identity: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkWithClaims(
    _claims: BigNumberish[],
    _identity: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addTrustedIssuer(
    _issuer: string,
    _claimTopics: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTrustedIssuer(
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTrustedIssuer(
    _issuer: string,
    _claimTopics: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedIssuer(_issuer: string, overrides?: CallOverrides): Promise<boolean>;

  hasClaimTopic(
    _issuer: string,
    _topic: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    factory(overrides?: CallOverrides): Promise<string>;

    /**
     * correspondence between wallet and identity
     */
    linkedIdentity(arg0: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requiredClaims(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedIssuerClaims(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * function used by the factory to register a newly created identity with the wallet of the creator
     */
    registerIdentity(
      _wallet: string,
      _identity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * function checking if a wallet is corresponding to an identity or not
     */
    isRegistered(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

    requireClaims(
      _checkType: BigNumberish,
      _claimTopics: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    check(
      _checkType: BigNumberish,
      _identity: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkWithClaims(
      _claims: BigNumberish[],
      _identity: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasClaimTopic(
      _issuer: string,
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimRequirementAdded(uint256,uint256[])"(
      checkType?: null,
      claimTopics?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { checkType: BigNumber; claimTopics: BigNumber[] }
    >;

    ClaimRequirementAdded(
      checkType?: null,
      claimTopics?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { checkType: BigNumber; claimTopics: BigNumber[] }
    >;

    "IdentityRegistered(address,address)"(
      wallet?: null,
      identity?: null
    ): TypedEventFilter<[string, string], { wallet: string; identity: string }>;

    IdentityRegistered(
      wallet?: null,
      identity?: null
    ): TypedEventFilter<[string, string], { wallet: string; identity: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TrustedIssuerAdded(address,uint256[])"(
      issuer?: null,
      claimTopics?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { issuer: string; claimTopics: BigNumber[] }
    >;

    TrustedIssuerAdded(
      issuer?: null,
      claimTopics?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { issuer: string; claimTopics: BigNumber[] }
    >;

    "TrustedIssuerRemoved(address)"(
      issuer?: null
    ): TypedEventFilter<[string], { issuer: string }>;

    TrustedIssuerRemoved(
      issuer?: null
    ): TypedEventFilter<[string], { issuer: string }>;

    "TrustedIssuerUpdated(address,uint256[])"(
      issuer?: null,
      claimTopics?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { issuer: string; claimTopics: BigNumber[] }
    >;

    TrustedIssuerUpdated(
      issuer?: null,
      claimTopics?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { issuer: string; claimTopics: BigNumber[] }
    >;
  };

  estimateGas: {
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * correspondence between wallet and identity
     */
    linkedIdentity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredClaims(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedIssuerClaims(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * function used by the factory to register a newly created identity with the wallet of the creator
     */
    registerIdentity(
      _wallet: string,
      _identity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * function checking if a wallet is corresponding to an identity or not
     */
    isRegistered(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireClaims(
      _checkType: BigNumberish,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    check(
      _checkType: BigNumberish,
      _identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkWithClaims(
      _claims: BigNumberish[],
      _identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTrustedIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimTopic(
      _issuer: string,
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * correspondence between wallet and identity
     */
    linkedIdentity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredClaims(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedIssuerClaims(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * function used by the factory to register a newly created identity with the wallet of the creator
     */
    registerIdentity(
      _wallet: string,
      _identity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * function checking if a wallet is corresponding to an identity or not
     */
    isRegistered(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireClaims(
      _checkType: BigNumberish,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    check(
      _checkType: BigNumberish,
      _identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkWithClaims(
      _claims: BigNumberish[],
      _identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTrustedIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTrustedIssuer(
      _issuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimTopic(
      _issuer: string,
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
