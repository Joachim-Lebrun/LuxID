/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IERC735Interface extends ethers.utils.Interface {
  functions: {
    "getClaim(bytes32)": FunctionFragment;
    "getClaimIdsByTopic(uint256)": FunctionFragment;
    "addClaim(uint256,uint256,address,bytes,bytes,string)": FunctionFragment;
    "removeClaim(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getClaim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getClaimIdsByTopic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addClaim",
    values: [BigNumberish, BigNumberish, string, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeClaim",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimIdsByTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeClaim",
    data: BytesLike
  ): Result;

  events: {
    "ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": EventFragment;
    "ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": EventFragment;
    "ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": EventFragment;
    "ClaimRequested(uint256,uint256,uint256,address,bytes,bytes,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRequested"): EventFragment;
}

export type ClaimAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, string, string] & {
    claimId: string;
    topic: BigNumber;
    scheme: BigNumber;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
>;

export type ClaimChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, string, string] & {
    claimId: string;
    topic: BigNumber;
    scheme: BigNumber;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
>;

export type ClaimRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, string, string] & {
    claimId: string;
    topic: BigNumber;
    scheme: BigNumber;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
>;

export type ClaimRequestedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string, string] & {
    claimRequestId: BigNumber;
    topic: BigNumber;
    scheme: BigNumber;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
>;

export class IERC735 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IERC735Interface;

  functions: {
    /**
     * Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    getClaim(
      _claimId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, string] & {
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    /**
     * Returns an array of claim IDs by topic.
     */
    getClaimIdsByTopic(
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { claimIds: string[] }>;

    /**
     * Add or update a claim. Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged` Specification: Requests the ADDITION or the CHANGE of a claim from an issuer. Claims can requested to be added by anybody, including the claim holder itself (self issued). _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`. This COULD implement an approval process for pending claims, or add them right away. MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.
     */
    addClaim(
      _topic: BigNumberish,
      _scheme: BigNumberish,
      issuer: string,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    removeClaim(
      _claimId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
   */
  getClaim(
    _claimId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string, string] & {
      topic: BigNumber;
      scheme: BigNumber;
      issuer: string;
      signature: string;
      data: string;
      uri: string;
    }
  >;

  /**
   * Returns an array of claim IDs by topic.
   */
  getClaimIdsByTopic(
    _topic: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Add or update a claim. Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged` Specification: Requests the ADDITION or the CHANGE of a claim from an issuer. Claims can requested to be added by anybody, including the claim holder itself (self issued). _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`. This COULD implement an approval process for pending claims, or add them right away. MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.
   */
  addClaim(
    _topic: BigNumberish,
    _scheme: BigNumberish,
    issuer: string,
    _signature: BytesLike,
    _data: BytesLike,
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
   */
  removeClaim(
    _claimId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    getClaim(
      _claimId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, string] & {
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    /**
     * Returns an array of claim IDs by topic.
     */
    getClaimIdsByTopic(
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Add or update a claim. Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged` Specification: Requests the ADDITION or the CHANGE of a claim from an issuer. Claims can requested to be added by anybody, including the claim holder itself (self issued). _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`. This COULD implement an approval process for pending claims, or add them right away. MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.
     */
    addClaim(
      _topic: BigNumberish,
      _scheme: BigNumberish,
      issuer: string,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    removeClaim(
      _claimId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)"(
      claimId?: BytesLike | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, string, string],
      {
        claimId: string;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    ClaimAdded(
      claimId?: BytesLike | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, string, string],
      {
        claimId: string;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    "ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)"(
      claimId?: BytesLike | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, string, string],
      {
        claimId: string;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    ClaimChanged(
      claimId?: BytesLike | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, string, string],
      {
        claimId: string;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    "ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)"(
      claimId?: BytesLike | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, string, string],
      {
        claimId: string;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    ClaimRemoved(
      claimId?: BytesLike | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, string, string],
      {
        claimId: string;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    "ClaimRequested(uint256,uint256,uint256,address,bytes,bytes,string)"(
      claimRequestId?: BigNumberish | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string, string, string],
      {
        claimRequestId: BigNumber;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;

    ClaimRequested(
      claimRequestId?: BigNumberish | null,
      topic?: BigNumberish | null,
      scheme?: null,
      issuer?: string | null,
      signature?: null,
      data?: null,
      uri?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string, string, string],
      {
        claimRequestId: BigNumber;
        topic: BigNumber;
        scheme: BigNumber;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    >;
  };

  estimateGas: {
    /**
     * Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    getClaim(
      _claimId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an array of claim IDs by topic.
     */
    getClaimIdsByTopic(
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Add or update a claim. Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged` Specification: Requests the ADDITION or the CHANGE of a claim from an issuer. Claims can requested to be added by anybody, including the claim holder itself (self issued). _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`. This COULD implement an approval process for pending claims, or add them right away. MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.
     */
    addClaim(
      _topic: BigNumberish,
      _scheme: BigNumberish,
      issuer: string,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    removeClaim(
      _claimId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    getClaim(
      _claimId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns an array of claim IDs by topic.
     */
    getClaimIdsByTopic(
      _topic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Add or update a claim. Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged` Specification: Requests the ADDITION or the CHANGE of a claim from an issuer. Claims can requested to be added by anybody, including the claim holder itself (self issued). _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`. This COULD implement an approval process for pending claims, or add them right away. MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.
     */
    addClaim(
      _topic: BigNumberish,
      _scheme: BigNumberish,
      issuer: string,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
     */
    removeClaim(
      _claimId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
