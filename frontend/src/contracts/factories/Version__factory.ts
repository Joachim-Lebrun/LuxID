/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Version, VersionInterface } from "../Version";

const _abi = [
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806354fd4d5014602d575b600080fd5b60408051808201825260058152640312e342e360dc1b6020820152905160529190605b565b60405180910390f35b600060208083528351808285015260005b81811015608657858101830151858201604001528201606c565b818111156097576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220d9b5ef7d00a359ad9c69cd6e3dd2778985fe3f587f88e810b5dffb15d0fe699064736f6c63430008090033";

export class Version__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Version> {
    return super.deploy(overrides || {}) as Promise<Version>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Version {
    return super.attach(address) as Version;
  }
  connect(signer: Signer): Version__factory {
    return super.connect(signer) as Version__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VersionInterface {
    return new utils.Interface(_abi) as VersionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Version {
    return new Contract(address, _abi, signerOrProvider) as Version;
  }
}
